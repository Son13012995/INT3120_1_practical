package com.example.bluromatic.data

import android.content.Context
import android.net.Uri
import androidx.lifecycle.asFlow
import androidx.work.*
import com.example.bluromatic.IMAGE_MANIPULATION_WORK_NAME
import com.example.bluromatic.KEY_BLUR_LEVEL
import com.example.bluromatic.KEY_IMAGE_URI
import com.example.bluromatic.TAG_OUTPUT
import com.example.bluromatic.getImageUri
import com.example.bluromatic.workers.BlurWorker
import com.example.bluromatic.workers.CleanupWorker
import com.example.bluromatic.workers.SaveImageToFileWorker
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import java.util.UUID

class WorkManagerBluromaticRepository(context: Context) : BluromaticRepository {

    // URI ·∫£nh g·ªëc
    private var imageUri: Uri = context.getImageUri()
    private val workManager = WorkManager.getInstance(context)

    // ID c·ªßa worker l∆∞u ·∫£nh cu·ªëi c√πng
    private var outputWorkId: UUID? = null

    // Theo d√µi ti·∫øn tr√¨nh worker theo tag
    override val outputWorkInfo: Flow<WorkInfo?> =
        workManager.getWorkInfosByTagLiveData(TAG_OUTPUT)
            .asFlow()
            .map { list -> list.firstOrNull() }


    override fun applyBlur(blurLevel: Int) {
        // B∆∞·ªõc 1: D·ªçn file t·∫°m
        var continuation = workManager.beginWith(OneTimeWorkRequest.from(CleanupWorker::class.java))

        // üü¢ Th√™m quy t·∫Øc r√†ng bu·ªôc pin kh√¥ng y·∫øu
        val constraints = Constraints.Builder()
            .setRequiresBatteryNotLow(true)
            .build()

        // B∆∞·ªõc 2: L√†m m·ªù ·∫£nh
        val blurBuilder = OneTimeWorkRequestBuilder<BlurWorker>()
        blurBuilder.setInputData(createInputDataForWorkRequest(blurLevel, imageUri))

        // üü¢ G·∫Øn constraint v√†o blur worker
        blurBuilder.setConstraints(constraints)

        continuation = continuation.then(blurBuilder.build())

        // B∆∞·ªõc 3: L∆∞u ·∫£nh
        val save = OneTimeWorkRequestBuilder<SaveImageToFileWorker>()
            .addTag(TAG_OUTPUT)
            .build()
        continuation = continuation.then(save)

        // B·∫Øt ƒë·∫ßu chu·ªói c√¥ng vi·ªác
        continuation.enqueue()

    }

    // H·ªßy to√†n b·ªô c√¥ng vi·ªác ƒëang ch·∫°y
    override fun cancelWork() {
        workManager.cancelUniqueWork(IMAGE_MANIPULATION_WORK_NAME)
    }

    // T·∫°o input data ch·ª©a m·ª©c ƒë·ªô l√†m m·ªù v√† URI ·∫£nh
    private fun createInputDataForWorkRequest(blurLevel: Int, imageUri: Uri): Data {
        return Data.Builder()
            .putString(KEY_IMAGE_URI, imageUri.toString())
            .putInt(KEY_BLUR_LEVEL, blurLevel)
            .build()
    }
}
